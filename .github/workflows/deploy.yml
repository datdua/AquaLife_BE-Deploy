name: Deploy Spring Boot to VPS
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn test
      shell: bash

  deploy:
    needs: test
    runs-on: [self-hosted, Windows, X64]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean package -DskipTests
      
    - name: Stop existing Java processes
      run: |
        Write-Host "Stopping existing Java processes..."
        taskkill /F /IM java.exe /T
        Start-Sleep -Seconds 10
        Write-Host "Java processes stopped"
      shell: powershell
      continue-on-error: true
      
    - name: Create directories and backup
      run: |
        $appPath = "C:\apps"
        $backupPath = "C:\apps\backup"
        
        if (!(Test-Path $appPath)) {
          New-Item -ItemType Directory -Path $appPath -Force
          Write-Host "Created directory: $appPath"
        }
        
        if (!(Test-Path $backupPath)) {
          New-Item -ItemType Directory -Path $backupPath -Force  
          Write-Host "Created directory: $backupPath"
        }
        
        $existingJar = Get-ChildItem "$appPath\*.jar" -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($existingJar) {
          $backupName = "backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')-$($existingJar.Name)"
          Copy-Item $existingJar.FullName "$backupPath\$backupName" -Force
          Write-Host "Backed up existing JAR to: $backupName"
        }
      shell: powershell
      continue-on-error: true
      
    - name: Deploy new JAR
      run: |
        $targetJar = Get-ChildItem "target\*.jar" | Where-Object { $_.Name -notlike "*sources*" -and $_.Name -notlike "*javadoc*" } | Select-Object -First 1
        
        if ($targetJar) {
          Copy-Item $targetJar.FullName "C:\apps\app.jar" -Force
          Write-Host "Deployed new JAR: $($targetJar.Name)"
        } else {
          Write-Host "ERROR: No JAR file found in target directory"
          exit 1
        }
      shell: powershell
      
    - name: Start application
      run: |
        $javaPath = "C:\Program Files\Java\jdk-17\bin\java.exe"
        $jarPath = "C:\apps\app.jar"
        
        Write-Host "Starting Spring Boot application..."
        if (Test-Path $javaPath) {
          Start-Process -FilePath $javaPath -ArgumentList "-jar", $jarPath -WindowStyle Hidden
          Start-Sleep -Seconds 20
          Write-Host "Application started"
        } else {
          Write-Host "ERROR: Không tìm thấy $javaPath"
        }
      shell: powershell
      
    - name: Health check
      run: |
        Write-Host "Starting health check..."
        $maxAttempts = 20
        $attempt = 0
        $success = $false
        
        do {
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080/actuator/health" -UseBasicParsing -TimeoutSec 5
            if ($response.StatusCode -eq 200) {
              Write-Host "SUCCESS: Application is healthy!"
              $success = $true
              break
            }
          } catch {
            Write-Host "Attempt $($attempt + 1): Waiting for application..."
          }
          $attempt++
          Start-Sleep -Seconds 10
        } while ($attempt -lt $maxAttempts)
        
        if (-not $success) {
          Write-Host "ERROR: Health check failed after $maxAttempts attempts"
          exit 1
        }
      shell: powershell
      
    - name: Rollback on failure
      if: failure()
      run: |
        Write-Host "ROLLBACK: Bắt đầu quá trình rollback..."
        
        $javaProcesses = Get-Process -Name "java" -ErrorAction SilentlyContinue
        if ($javaProcesses) {
          taskkill /F /IM java.exe /T
          Start-Sleep -Seconds 5
          Write-Host "Đã dừng các tiến trình Java."
        } else {
          Write-Host "Không tìm thấy tiến trình Java để dừng."
        }
        
        $backupFile = Get-ChildItem "C:\apps\backup\backup-*.jar" -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        
        if ($backupFile) {
          Write-Host "Khôi phục từ backup: $($backupFile.Name)"
          Copy-Item $backupFile.FullName "C:\apps\app.jar" -Force
          
          $javaPath = "C:\Program Files\Java\jdk-17\bin\java.exe"
          if (Test-Path $javaPath) {
            Start-Process -FilePath $javaPath -ArgumentList "-jar", "C:\apps\app.jar" -WindowStyle Hidden
            Start-Sleep -Seconds 15
            Write-Host "ROLLBACK: Hoàn tất thành công."
          } else {
            Write-Host "ERROR: Không tìm thấy $javaPath"
          }
        } else {
          Write-Host "ROLLBACK: Không tìm thấy file backup"
        }
      shell: powershell
