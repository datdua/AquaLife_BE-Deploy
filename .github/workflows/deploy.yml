name: Deploy Spring Boot to VPS
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test

  deploy:
    needs: test
    runs-on: [self-hosted, Windows, X64]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean package -DskipTests
      
    - name: Find and stop Spring Boot application
      run: |
        Write-Host "üîç Finding Spring Boot application process..."
        
        # T√¨m process Java ƒëang ch·∫°y tr√™n port 8080
        $port8080Process = Get-NetTCPConnection -LocalPort 8080 -ErrorAction SilentlyContinue | Select-Object -First 1
        
        if ($port8080Process) {
          $processId = $port8080Process.OwningProcess
          Write-Host "üìã Found process using port 8080: PID $processId"
          
          try {
            $process = Get-Process -Id $processId -ErrorAction Stop
            Write-Host "üõë Stopping process: $($process.ProcessName) (PID: $processId)"
            Stop-Process -Id $processId -Force
            Start-Sleep -Seconds 10
            Write-Host "‚úÖ Process stopped successfully"
          } catch {
            Write-Host "‚ö†Ô∏è Could not stop process: $($_.Exception.Message)"
          }
        } else {
          Write-Host "‚ÑπÔ∏è No process found using port 8080"
        }
        
        # Backup: Kill any remaining java processes that might be Spring Boot
        $javaProcesses = Get-Process java -ErrorAction SilentlyContinue
        foreach ($proc in $javaProcesses) {
          try {
            $cmdLine = (Get-WmiObject Win32_Process -Filter "ProcessId = $($proc.Id)").CommandLine
            if ($cmdLine -and $cmdLine -like "*spring-boot*" -or $cmdLine -like "*.jar*") {
              Write-Host "üõë Stopping additional Spring Boot process: PID $($proc.Id)"
              Stop-Process -Id $proc.Id -Force
            }
          } catch {
            # Ignore errors for command line detection
          }
        }
        
        Start-Sleep -Seconds 5
      shell: pwsh
      continue-on-error: true
      
    - name: Backup current JAR
      run: |
        $appPath = "C:\apps"
        $backupPath = "C:\apps\backup"
        
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        if (!(Test-Path $appPath)) {
          New-Item -ItemType Directory -Path $appPath -Force
        }
        if (!(Test-Path $backupPath)) {
          New-Item -ItemType Directory -Path $backupPath -Force
        }
        
        # Backup JAR file hi·ªán t·∫°i
        $currentJar = Get-ChildItem "$appPath\*.jar" -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($currentJar) {
          $backupName = "backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')-$($currentJar.Name)"
          Copy-Item $currentJar.FullName "$backupPath\$backupName" -Force
          Write-Host "üíæ Backed up current JAR to: $backupName"
        } else {
          Write-Host "‚ÑπÔ∏è No current JAR file found to backup"
        }
      shell: pwsh
      continue-on-error: true
      
    - name: Deploy new JAR
      run: |
        $appPath = "C:\apps"
        
        # T√¨m JAR file m·ªõi ƒë∆∞·ª£c build
        $newJar = Get-ChildItem "target\*.jar" | Where-Object { $_.Name -notlike "*sources*" -and $_.Name -notlike "*javadoc*" } | Select-Object -First 1
        
        if ($newJar) {
          $targetPath = "$appPath\app.jar"
          Copy-Item $newJar.FullName $targetPath -Force
          Write-Host "üì¶ Deployed new JAR: $($newJar.Name) -> $targetPath"
        } else {
          Write-Host "‚ùå No JAR file found in target directory"
          exit 1
        }
      shell: pwsh
      
    - name: Start Spring Boot application
      run: |
        $appPath = "C:\apps\app.jar"
        $javaPath = "C:\Program Files\Java\jdk-17\bin\java.exe"
        
        if (Test-Path $appPath) {
          Write-Host "üöÄ Starting Spring Boot application..."
          
          # Ch·∫°y ·ª©ng d·ª•ng trong background
          $processInfo = New-Object System.Diagnostics.ProcessStartInfo
          $processInfo.FileName = $javaPath
          $processInfo.Arguments = "-jar `"$appPath`""
          $processInfo.UseShellExecute = $false
          $processInfo.CreateNoWindow = $true
          $processInfo.RedirectStandardOutput = $true
          $processInfo.RedirectStandardError = $true
          
          $process = [System.Diagnostics.Process]::Start($processInfo)
          Write-Host "‚úÖ Application started with PID: $($process.Id)"
          
          Start-Sleep -Seconds 20
        } else {
          Write-Host "‚ùå JAR file not found at: $appPath"
          exit 1
        }
      shell: pwsh
      
    - name: Health check
      run: |
        Write-Host "üè• Starting health check..."
        $maxAttempts = 30
        $attempt = 0
        $healthUrl = "http://localhost:8080/actuator/health"
        
        do {
          try {
            $response = Invoke-WebRequest -Uri $healthUrl -UseBasicParsing -TimeoutSec 10
            if ($response.StatusCode -eq 200) {
              Write-Host "‚úÖ Application is healthy! Response: $($response.StatusCode)"
              Write-Host "üìä Health check passed at attempt $($attempt + 1)"
              exit 0
            }
          } catch {
            Write-Host "‚è≥ Health check attempt $($attempt + 1)/$maxAttempts failed: $($_.Exception.Message)"
            
            # Ki·ªÉm tra xem c√≥ process n√†o ƒëang ch·∫°y tr√™n port 8080 kh√¥ng
            $portCheck = Get-NetTCPConnection -LocalPort 8080 -ErrorAction SilentlyContinue
            if ($portCheck) {
              Write-Host "üì° Port 8080 is active, waiting for application to be ready..."
            } else {
              Write-Host "‚ö†Ô∏è Port 8080 is not active, application may have failed to start"
            }
          }
          $attempt++
          Start-Sleep -Seconds 10
        } while ($attempt -lt $maxAttempts)
        
        Write-Host "‚ùå Health check failed after $maxAttempts attempts"
        
        # Log th√¥ng tin debug
        Write-Host "üîç Debug information:"
        Get-Process java -ErrorAction SilentlyContinue | Select-Object Id, ProcessName, CPU
        Get-NetTCPConnection -LocalPort 8080 -ErrorAction SilentlyContinue | Select-Object State, OwningProcess
        
        exit 1
      shell: pwsh
      
    - name: Rollback on failure
      if: failure()
      run: |
        Write-Host "üîÑ Starting rollback process..."
        
        # Stop current failed application
        $port8080Process = Get-NetTCPConnection -LocalPort 8080 -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($port8080Process) {
          Stop-Process -Id $port8080Process.OwningProcess -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 5
        }
        
        # Find most recent backup
        $backupPath = "C:\apps\backup"
        $backupFile = Get-ChildItem "$backupPath\backup-*.jar" -ErrorAction SilentlyContinue | Sort-Object LastWriteTime -Descending | Select-Object -First 1
        
        if ($backupFile) {
          Write-Host "üìÅ Found backup file: $($backupFile.Name)"
          Copy-Item $backupFile.FullName "C:\apps\app.jar" -Force
          
          # Start backup version
          $javaPath = "C:\Program Files\Java\jdk-17\bin\java.exe"
          $processInfo = New-Object System.Diagnostics.ProcessStartInfo
          $processInfo.FileName = $javaPath
          $processInfo.Arguments = "-jar `"C:\apps\app.jar`""
          $processInfo.UseShellExecute = $false
          $processInfo.CreateNoWindow = $true
          
          $process = [System.Diagnostics.Process]::Start($processInfo)
          Write-Host "‚úÖ Rollback completed! Started backup version with PID: $($process.Id)"
          
          Start-Sleep -Seconds 15
          
          # Quick health check for rollback
          try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080/actuator/health" -UseBasicParsing -TimeoutSec 10
            if ($response.StatusCode -eq 200) {
              Write-Host "‚úÖ Rollback successful - application is responding"
            }
          } catch {
            Write-Host "‚ö†Ô∏è Rollback completed but health check failed"
          }
          
        } else {
          Write-Host "‚ùå No backup file found for rollback"
        }
      shell: pwsh
